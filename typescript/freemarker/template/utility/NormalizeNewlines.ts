/* Generated from Java with JSweet 2.2.0-SNAPSHOT - http://www.jsweet.org */
import {TemplateTransformModel} from '../TemplateTransformModel';
import {BufferedReader} from '../../../java/io/BufferedReader';
import {PrintWriter} from '../../../java/io/PrintWriter';
import {Reader} from '../../../java/io/Reader';
import {StringReader} from '../../../java/io/StringReader';
import {StringWriter} from '../../../java/io/StringWriter';
import {Writer} from '../../../java/io/Writer';
import {StringBuilder} from '../../../java/lang/StringBuilder';

/**
 * <p>Transformer that supports FreeMarker legacy behavior: all newlines appearing
 * within the transformed area will be transformed into the platform's default
 * newline. Unlike the old behavior, however, newlines generated by the data
 * model are also converted. Legacy behavior was to leave newlines in the
 * data model unaltered.</p>
 * 
 * <p>Usage:<br>
 * From java:</p>
 * <pre>
 * SimpleHash root = new SimpleHash();
 * 
 * root.put( "normalizeNewlines", new freemarker.template.utility.NormalizeNewlines() );
 * 
 * ...
 * </pre>
 * 
 * <p>From your FreeMarker template:</p>
 * <pre>
 * &lt;transform normalizeNewlines&gt;
 * &lt;html&gt;
 * &lt;head&gt;
 * ...
 * &lt;p&gt;This template has all newlines normalized to the current platform's
 * default.&lt;/p&gt;
 * ...
 * &lt;/body&gt;
 * &lt;/html&gt;
 * &lt;/transform&gt;
 * </pre>
 * @class
 */
export class NormalizeNewlines implements TemplateTransformModel {
    public getWriter(out : Writer, args : Map<any, any>) : Writer {
        let buf : StringBuilder = new StringBuilder("");
        return new NormalizeNewlines.NormalizeNewlines$0(this, buf, out);
    }

    /**
     * Performs newline normalization on FreeMarker output.
     * 
     * @param {Reader} in  the input to be transformed
     * @param {Writer} out the destination of the transformation
     */
    public transform(__in : Reader, out : Writer) {
        let br : BufferedReader = (__in != null && __in instanceof <any>BufferedReader)?<BufferedReader>__in:new BufferedReader(__in);
        let pw : PrintWriter = (out != null && out instanceof <any>PrintWriter)?<PrintWriter>out:new PrintWriter(out);
        let line : string = br.readLine();
        if(line != null) {
            if(line.length > 0) {
                pw.println(line);
            }
        }
        while(((line = br.readLine()) != null)) {
            pw.println(line);
        }
    }

    constructor() {
    }
}
NormalizeNewlines["__class"] = "freemarker.template.utility.NormalizeNewlines";
NormalizeNewlines["__interfaces"] = ["freemarker.template.TemplateTransformModel","freemarker.template.TemplateModel"];



export namespace NormalizeNewlines {

    export class NormalizeNewlines$0 {
        public __parent: any;
        /**
         * 
         * @param {Array} cbuf
         * @param {number} off
         * @param {number} len
         */
        public write(cbuf : string[], off : number, len : number) {
            this.buf.append(cbuf, off, len);
        }

        /**
         * 
         */
        public flush() {
            this.out.flush();
        }

        /**
         * 
         */
        public close() {
            let sr : StringReader = new StringReader(this.buf.toString());
            let sw : StringWriter = new StringWriter();
            this.__parent.transform(sr, sw);
            this.out.write(sw.toString());
        }

        constructor(__parent: any, private buf: any, private out: any) {
            this.__parent = __parent;
        }
    }
    NormalizeNewlines$0["__interfaces"] = ["java.lang.Appendable","java.io.Closeable","java.lang.AutoCloseable","java.io.Flushable"];


}




